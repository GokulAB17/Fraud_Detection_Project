# -*- coding: utf-8 -*-
"""final_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qy9KF89WXg3SQOxDbD4FN_jRX4sytNVC
"""

import numpy as np 
import pandas as pd

dataset = pd.read_csv('./processed_data_main.csv')

dataset.drop(["Unnamed: 0"], axis=1,inplace=True)

dataset["I15"].value_counts()

data_minority = dataset.loc[dataset['I15']==0]
data_majority = dataset.loc[dataset['I15']==1]

from sklearn.utils import resample
data_minority_upsampled = resample(data_minority, replace=True, n_samples=780361, random_state=42)

data_upsampled = pd.concat([data_majority, data_minority_upsampled ], ignore_index=True)

X = data_upsampled.drop(['I15'],axis=1).values
Y = data_upsampled['I15']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, stratify=Y, test_size=0.3, random_state=42)

from sklearn.ensemble import RandomForestClassifier
model_RF_upsampled = RandomForestClassifier(n_estimators=10, random_state=42)

model_RF_upsampled.fit(X_train, Y_train)

from sklearn.metrics import classification_report, confusion_matrix
Y_pred = model_RF_upsampled.predict(X_train)

Y_pred_test = model_RF_upsampled.predict(X_test)

print(classification_report(Y_test, Y_pred_test))

print(confusion_matrix(Y_test, Y_pred_test))

Y_pred_whole = model_RF_upsampled.predict(dataset.drop(['I15'],axis=1))

print(classification_report(dataset["I15"], Y_pred_whole))

print(confusion_matrix(dataset["I15"], Y_pred_whole))

import pickle

# Saving model to disk
pickle.dump(model_RF_upsampled, open('model_RF_upsampled.pkl','wb'))